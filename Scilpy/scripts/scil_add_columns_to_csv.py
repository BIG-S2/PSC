#!/usr/bin/env python
# encoding: utf-8

from __future__ import division

import argparse
import csv
import os


DESCRIPTION = """
Adds values from one CSV file at the end of the lines of the other CSV file.

This can be used to create a merged CSV from 2 CSV files containing data
related to the same dataset, but generated by 2 scripts. The content of the
second file is appended at the end of the line of the first file.

If multiple lines are present in each file, the process is repeated for each
line.
"""


def line_count(fname):
    i = 0
    with open(fname, 'r') as f:
        for i, l in enumerate(f, 1):
            pass
    return i


def buildArgsParser():
    p = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
                                description=DESCRIPTION)

    p.add_argument('csv_1', action='store', metavar='FIRST_CSV', type=str,
                   help='first csv file. will be put first in the output.')
    p.add_argument('csv_2', action='store', metavar='SECOND_CSV', type=str,
                   help='second csv file. will be put second in the output.')
    p.add_argument('out_csv', action='store', metavar='OUT_CSV', type=str,
                   help='output merged CSV file.')

    p.add_argument('-f', dest='overwrite', action='store_true',
                   help='Force overwriting of the output files.')

    return p


def main():
    parser = buildArgsParser()
    args = parser.parse_args()

    if not os.path.isfile(args.csv_1):
        parser.error('"{0}" must be a file!'.format(args.csv_1))

    if not os.path.isfile(args.csv_2):
        parser.error('"{0}" must be a file!'.format(args.csv_2))

    if os.path.isfile(args.out_csv) and not args.overwrite:
        parser.error('"{}" already exists! Use -f to force overwriting the '
                     'file.'.format(args.out_csv))

    # Make sure both files share the same number of lines
    if line_count(args.csv_1) != line_count(args.csv_2):
        parser.error('Both CSV files do not have the same number of lines. '
                     'Cannot merge.')

    # Initialize the header dictionary from both files, to be able to
    # create the output file
    with open(args.csv_1) as csv_file_1:
        with open(args.csv_2) as csv_file_2:
            reader1 = csv.DictReader(csv_file_1)
            reader2 = csv.DictReader(csv_file_2)
            header_values = reader1.fieldnames + reader2.fieldnames

            with open(args.out_csv, 'wb') as out_file:
                writer = csv.DictWriter(out_file, header_values)
                writer.writeheader()

                for row1, row2 in zip(reader1, reader2):
                    final_row = row1.copy()
                    final_row.update(row2)
                    writer.writerow(final_row)


if __name__ == "__main__":
    main()
